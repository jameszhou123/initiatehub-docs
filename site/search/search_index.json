{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the InitiateHub Documentation","text":"<p>Find guides and references for projects at InitiateHub, including mobile apps, websites, and development workflows.</p>"},{"location":"#contents","title":"\ud83d\udcda Contents","text":""},{"location":"#flutter-development","title":"Flutter Development","text":"<ul> <li>Project Structure</li> <li>New Project with Firebase</li> </ul>"},{"location":"#strapi","title":"Strapi","text":"<ul> <li>Deploy Guide</li> </ul>"},{"location":"#projects","title":"Projects","text":""},{"location":"#encyclopedia-mobile-app","title":"Encyclopedia Mobile App","text":"<ul> <li>Project Overview</li> <li>Features Wall</li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Start with the Flutter Development section or explore specific projects.</p>"},{"location":"#contribute","title":"\ud83d\udce2 Contribute","text":"<p>Keep our docs updated! Contact the documentation team with suggestions.</p>"},{"location":"flutter/new-project-with-firebase/","title":"Firebase Setup Guide for Flutter Projects","text":""},{"location":"flutter/new-project-with-firebase/#1-create-new-project","title":"1. Create New Project","text":"<pre><code>flutter create --org com.initiatehub --platforms android,ios,web encyclopedia\n</code></pre> <p>Tip: Always use <code>--org</code> and <code>--platforms</code> when creating a new project.</p>"},{"location":"flutter/new-project-with-firebase/#2-firebase-configuration","title":"2. Firebase Configuration","text":"<ol> <li>Run <code>flutterfire configure</code> to create a new project on Firebase.</li> <li>Add Firebase plugins:    <pre><code>flutter pub add firebase_plugin_name1 firebase_plugin_name2 ...\n</code></pre></li> <li>Run <code>flutterfire configure</code> again after adding all plugins.</li> </ol>"},{"location":"flutter/new-project-with-firebase/#3-android-setup","title":"3. Android Setup","text":""},{"location":"flutter/new-project-with-firebase/#update-appbuildgradle","title":"Update app/build.gradle","text":"<p>Add these dependencies:</p> <pre><code>dependencies {\n    // Import the Firebase BoM\n    implementation platform('com.google.firebase:firebase-bom:33.2.0')\n\n    // Add the dependencies for Firebase products\n    implementation 'com.google.firebase:firebase-auth'\n    implementation 'com.google.firebase:firebase-firestore'\n    implementation 'com.google.firebase:firebase-storage'\n    implementation 'com.google.firebase:firebase-analytics'\n\n    // For Google Sign-In\n    implementation 'com.google.android.gms:play-services-auth:20.7.0'\n\n    // Add other Firebase products as needed\n}\n</code></pre> <p>Sync the gradle in Android Studio after adding dependencies.</p>"},{"location":"flutter/new-project-with-firebase/#4-firebase-console-setup","title":"4. Firebase Console Setup","text":"<ol> <li>Enable password signin and Google sign-in providers.</li> <li>Add SHA1 and SHA256 keys for Google Sign-In.</li> </ol>"},{"location":"flutter/new-project-with-firebase/#generate-release-keystore","title":"Generate Release Keystore","text":"<p>In the android folder, run:</p> <pre><code>keytool -genkey -v -keystore encyclopedia-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias encyclopedia\n</code></pre>"},{"location":"flutter/new-project-with-firebase/#configure-release-keystore","title":"Configure Release Keystore","text":"<p>In app/build.gradle:</p> <pre><code>android {\n    ...\n    signingConfigs {\n        release {\n            keyAlias 'com.initiatehub.encyclopedia'\n            keyPassword 'your-key-password'\n            storeFile file('encyclopedia-release-key.jks')\n            storePassword 'your-keystore-password'\n        }\n    }\n    buildTypes {\n        release {\n            signingConfig signingConfigs.release\n            minifyEnabled false\n            shrinkResources false\n        }\n    }\n}\n</code></pre>"},{"location":"flutter/new-project-with-firebase/#get-signing-report","title":"Get Signing Report","text":"<p>Run in the android folder:</p> <pre><code>./gradlew signingReport\n</code></pre> <p>Add both debug and release SHA1 and SHA256 to Firebase console project settings.</p>"},{"location":"flutter/new-project-with-firebase/#5-final-steps","title":"5. Final Steps","text":"<ol> <li>Run <code>flutterfire configure</code> again to pull all Firebase config changes.</li> <li>Copy all auth feature code to the new project.</li> </ol> <p>Note: If prompted to upgrade Kotlin version during gradle sync, follow the system instructions.</p>"},{"location":"flutter/project-structure/","title":"Project Structure Documentation","text":""},{"location":"flutter/project-structure/#introduction-to-the-project-structure","title":"Introduction to the Project Structure","text":"<p>A well-organized project structure is essential for maintaining clean, scalable, and manageable code in a Flutter application. The structure outlined below separates concerns by grouping related files and functionality into logical directories. This approach enhances collaboration among team members, simplifies debugging, and facilitates easier scaling and maintenance of the application as it grows.</p> <p>The structure includes directories like <code>core</code> for foundational elements, <code>shared</code> for reusable UI components, <code>features</code> for feature-specific code, and <code>startup</code> for initialization logic. Each directory has a specific purpose, which helps maintain a clear and logical organization of the codebase.</p>"},{"location":"flutter/project-structure/#example-folder-tree","title":"Example Folder Tree","text":"<pre><code>lib/\n\u2523 core/                        // Foundational and configuration elements\n\u2503 \u2523 config.dart                // Application-wide configuration settings\n\u2503 \u2523 constants.dart             // Global constants for UI, styling, etc.\n\u2503 \u2517 utils/                     // General utilities used throughout the app\n\u2503   \u2517 date_utils.dart          // Example utility file\n\u2523 shared/                      // Reusable UI components and shared widgets\n\u2503 \u2517 widgets/                   // Folder for shared/reusable widgets\n\u2503   \u2523 custom_button.dart       // Example of a custom button widget\n\u2503   \u2523 custom_card.dart         // Example of a custom card widget\n\u2503   \u2517 loading_spinner.dart     // Example of a reusable loading spinner\n\u2523 features/                    // Feature-specific modules\n\u2503 \u2523 auth/                      // Authentication feature\n\u2503 \u2503 \u2523 models/\n\u2503 \u2503 \u2503 \u2517 user_model.dart        // Data model for user\n\u2503 \u2503 \u2523 providers/\n\u2503 \u2503 \u2503 \u2517 auth_provider.dart     // State management for auth\n\u2503 \u2503 \u2523 screens/\n\u2503 \u2503 \u2503 \u2523 forgot_password_screen.dart  // Forgot password screen\n\u2503 \u2503 \u2503 \u2523 login_screen.dart            // Login screen\n\u2503 \u2503 \u2503 \u2517 signup_screen.dart           // Signup screen\n\u2503 \u2503 \u2523 services/\n\u2503 \u2503 \u2503 \u2517 auth_service.dart      // Service for authentication logic\n\u2503 \u2503 \u2517 utils/\n\u2503 \u2503   \u2523 auth_exception_handler.dart  // Handles auth exceptions\n\u2503 \u2503   \u2517 auth_validators.dart         // Validation logic for auth forms\n\u2503 \u2517 home/                     // Home feature\n\u2503   \u2523 screens/\n\u2503   \u2503 \u2517 home_screen.dart      // Home screen\n\u2503   \u2517 widgets/                // Feature-specific widgets\n\u2503     \u2517 home_banner.dart      // Example widget for home screen\n\u2523 startup/                    // Application initialization\n\u2503 \u2523 app_providers.dart        // Setup of app-wide providers and state management\n\u2503 \u2517 app_router.dart           // Configuration of app routes\n\u2523 firebase_options.dart       // Firebase configuration\n\u2517 main.dart                   // Main entry point of the application\n</code></pre>"},{"location":"flutter/project-structure/#expanded-explanation-of-the-structure","title":"Expanded Explanation of the Structure","text":""},{"location":"flutter/project-structure/#core","title":"core/","text":"<p>Purpose: Acts as the backbone of the application, containing critical elements such as global configurations, constants, and utilities that are essential for the overall setup and operation of the app.</p> <p>Contents:</p> <ul> <li>Configuration Files: These files, like <code>config.dart</code>, define environment-specific settings that influence how the app behaves across different environments (development, staging, production).</li> <li>Constants: Files like <code>constants.dart</code> hold static values such as colors, padding, and font sizes used throughout the app, promoting consistency and easy modifications.</li> <li>Utilities: Utility files provide helper functions that can be used across the app, improving code reusability and reducing redundancy.</li> </ul>"},{"location":"flutter/project-structure/#shared","title":"shared/","text":"<ul> <li>Purpose: Focuses on reusable UI components and design elements that can be utilized across various parts of the app, ensuring a consistent look and feel.</li> <li>Contents:</li> <li>Widgets: Contains reusable components like buttons, cards, and loading spinners that are commonly used throughout the app's UI. By centralizing these widgets, changes can be made in one place and automatically reflected wherever these components are used.</li> </ul>"},{"location":"flutter/project-structure/#features","title":"features/","text":"<p>Purpose: Organizes the code into self-contained modules, each representing a distinct feature or functionality of the app, such as authentication or home screens. This modular approach simplifies development, testing, and maintenance by isolating features.</p> <p>Contents:</p> <ul> <li>Models: Defines data structures related to the feature, such as <code>user_model.dart</code> for user data in the authentication feature.</li> <li>Providers: Contains state management classes specific to the feature, such as <code>auth_provider.dart</code>, to handle state and business logic.</li> <li>Screens: Includes the UI screens for the feature, such as <code>login_screen.dart</code> and <code>signup_screen.dart</code>, ensuring that the feature's UI components are kept together.</li> <li>Services: Implements feature-specific services, like API interactions in <code>auth_service.dart</code>, keeping the feature's logic encapsulated.</li> <li>Utils: Houses utility functions specific to the feature, enhancing modularity and reusability within that context.</li> </ul>"},{"location":"flutter/project-structure/#startup","title":"startup/","text":"<p>Purpose: Manages the application's startup process, including the initialization of providers and setting up routing, ensuring a clean and organized launch sequence.</p> <p>Contents:</p> <ul> <li>App Providers: Sets up global state management, such as configuring providers for dependency injection.</li> <li>App Router: Defines the navigation structure, handling route configuration and navigation logic to keep routing centralized and manageable.</li> </ul> <p>This structured approach helps maintain a clean, scalable, and organized codebase, making it easier to collaborate, extend functionality, and maintain the application over time.</p>"},{"location":"projects/encyclopedia/","title":"Introduction to the Development of the Enhanced Encyclopedia Mobile App","text":"<p>Welcome to the development phase of our Enhanced Encyclopedia Mobile App, designed specifically for K-12 students and available on both iOS and Android platforms. This project aims to create a dynamic and interactive learning tool that provides students with a rich, personalized educational experience right at their fingertips.</p>"},{"location":"projects/encyclopedia/#development-overview","title":"Development Overview","text":"<p>Our app will be developed using Flutter, allowing us to maintain a single codebase for both iOS and Android, ensuring a consistent user experience across devices. The app will leverage Firebase as the backend, providing robust, scalable, and secure services that meet the needs of our young audience.</p>"},{"location":"projects/encyclopedia/#key-technologies-and-frameworks","title":"Key Technologies and Frameworks","text":""},{"location":"projects/encyclopedia/#flutter","title":"Flutter","text":"<p>Chosen for its ability to deliver high-performance, visually appealing applications across both iOS and Android with a single codebase. Flutter's rich widget library will help us create an engaging and intuitive user interface tailored to K-12 students.</p>"},{"location":"projects/encyclopedia/#firebase-integration","title":"Firebase Integration","text":"<ol> <li> <p>Firebase Authentication: We'll implement Firebase Auth to handle user authentication, supporting both email/password sign-ins and social sign-ins (e.g., Google, Apple, and other popular platforms). This approach ensures a secure and seamless login experience for students.</p> </li> <li> <p>Firebase Firestore: As our primary database, Firestore will store all dynamic content, user data, progress tracking, and other essential app data. Its real-time synchronization capabilities will provide users with up-to-date content and interactive features.</p> </li> <li> <p>Firebase Storage: Firebase Storage will be utilized for storing and serving static assets, such as images, videos, and audio files. This will enable smooth media delivery and ensure that all content is reliably available across various network conditions.</p> </li> </ol>"},{"location":"projects/encyclopedia/#ai-driven-content-generation-and-voice-over","title":"AI-Driven Content Generation and Voice-Over","text":"<ul> <li>The app will use AI to generate tailored content, adapting to each student's learning pace and preferences. This includes personalized article recommendations, quiz questions, and interactive educational activities.</li> <li>AI-powered voice-over features will provide read-aloud options, enhancing accessibility for early readers and students with learning differences. This feature aims to support auditory learning styles and improve overall engagement.</li> </ul>"},{"location":"projects/encyclopedia/#target-audience","title":"Target Audience","text":"<p>The primary audience for our app includes K-12 students, spanning a wide age and education range. Therefore, the app will be designed with flexible content adaptability to meet the varying cognitive and developmental needs of this audience. This includes:</p> <ul> <li>Simplified navigation and a user-friendly interface appropriate for younger users.</li> <li>Age-appropriate content filters to ensure safety and relevance.</li> <li>Features that cater to different learning styles, including visual, auditory, and kinesthetic learners.</li> </ul>"},{"location":"projects/encyclopedia/#project-objectives-and-next-steps","title":"Project Objectives and Next Steps","text":"<p>Our immediate objectives include:</p> <ol> <li> <p>Setting Up the Backend: Configuring Firebase services, including setting up Firestore collections and documents, configuring Firebase Auth for multi-method sign-in options, and organizing Firebase Storage for multimedia assets.</p> </li> <li> <p>Building the Core Features: Starting with essential features like content display, interactive quizzes, progress tracking, and personalized recommendations. These will form the backbone of the app's value proposition to users.</p> </li> <li> <p>Implementing AI Capabilities: Integrating AI for content generation and voice-over functionalities, ensuring these features are seamlessly incorporated into the user experience.</p> </li> <li> <p>Testing and Iteration: Rigorous testing across devices to ensure the app meets performance and usability standards for both iOS and Android. Feedback loops with educators and students will guide iterative improvements.</p> </li> </ol> <p>This development approach will ensure we build a robust, engaging, and educationally valuable app that supports diverse learning journeys. Our commitment is to provide a reliable, scalable solution that grows with its users, delivering an enriching educational experience for K-12 students.</p> <p>By leveraging cutting-edge technologies and educational best practices, we aim to create an encyclopedia app that not only informs but inspires a lifelong love of learning.</p>"},{"location":"projects/encyclopedia/features-wall/","title":"Enhanced Encyclopedia Mobile App Features","text":""},{"location":"projects/encyclopedia/features-wall/#1-smart-content-adaptation","title":"1. Smart Content Adaptation","text":"<ul> <li>Utilize AI to dynamically adjust content complexity based on user interactions and reading speed</li> <li>Implement a \"grow with me\" feature that gradually introduces more advanced concepts as the user progresses</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#2-rich-multimedia-content","title":"2. Rich Multimedia Content","text":"<ul> <li>Incorporate interactive 3D models for scientific and historical concepts</li> <li>Add a \"Story Mode\" feature that presents historical events or scientific processes as engaging narratives</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#3-personalized-learning-ecosystem","title":"3. Personalized Learning Ecosystem","text":"<ul> <li>Implement spaced repetition algorithms to reinforce learned concepts over time</li> <li>Offer AI-powered study recommendations based on the user's learning style and interests</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#4-engaging-and-inclusive-interface","title":"4. Engaging and Inclusive Interface","text":"<ul> <li>Implement a customizable color scheme with options for different themes (e.g., nature, space, history)</li> <li>Use dyslexia-friendly fonts and high-contrast mode for better accessibility</li> <li>Create diverse, culturally representative mascots to guide users through the app</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#5-interactive-home-screen","title":"5. Interactive Home Screen","text":"<ul> <li>Design a customizable dashboard where users can pin favorite topics or current areas of study</li> <li>Include a \"Topic of the Day\" feature with rotating subjects to encourage diverse learning</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#6-gamified-learning-experience","title":"6. Gamified Learning Experience","text":"<ul> <li>Create an \"Explorer's Journey\" with quests and challenges across different subject areas</li> <li>Introduce peer competitions and leaderboards for quiz scores and learning streaks</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#7-accessibility-and-language-support","title":"7. Accessibility and Language Support","text":"<ul> <li>Provide real-time language translation for article content</li> <li>Include sign language video explanations for key concepts</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#8-comprehensive-progress-tracking","title":"8. Comprehensive Progress Tracking","text":"<ul> <li>Visualize learning progress with interactive knowledge maps</li> <li>Generate detailed reports on areas of strength and opportunities for improvement</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#9-integration-with-educational-standards","title":"9. Integration with Educational Standards","text":"<ul> <li>Align content with national and international curriculum standards</li> <li>Provide tools for teachers to create custom curricula and track class progress</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#10-adaptive-assessment","title":"10. Adaptive Assessment","text":"<ul> <li>Use machine learning to generate personalized quizzes that adapt to the user's knowledge level</li> <li>Provide instant, constructive feedback on quiz performance with tailored learning recommendations</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#11-offline-and-low-bandwidth-options","title":"11. Offline and Low-Bandwidth Options","text":"<ul> <li>Compress content for efficient offline storage</li> <li>Offer text-only versions of articles for low-bandwidth situations</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#12-cross-platform-synchronization","title":"12. Cross-Platform Synchronization","text":"<ul> <li>Enable seamless transition between mobile devices, tablets, and desktop computers</li> <li>Integrate with popular learning management systems used in schools</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#13-parental-and-educator-involvement","title":"13. Parental and Educator Involvement","text":"<ul> <li>Create a companion app for parents and teachers to monitor progress and set learning goals</li> <li>Facilitate parent-teacher communication through in-app messaging and progress sharing</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#14-collaborative-learning-features","title":"14. Collaborative Learning Features","text":"<ul> <li>Create virtual study rooms where friends can learn together in real-time</li> <li>Implement a \"Peer Tutor\" system where older students can earn rewards for helping younger ones</li> </ul>"},{"location":"projects/encyclopedia/features-wall/#15-gamified-research-skills","title":"15. Gamified Research Skills","text":"<ul> <li>Teach information literacy through interactive lessons on fact-checking and source evaluation</li> <li>Reward users for citing sources and cross-referencing information</li> </ul>"},{"location":"strapi/strapi-deploy-guide/","title":"Deploying Strapi Using Docker Compose","text":"<p>This guide outlines the steps to deploy a Strapi application with PostgreSQL on a VPS using Docker Compose. Follow these instructions to set up your environment, create and push the Docker image to Docker Hub, and deploy on your VPS.</p>"},{"location":"strapi/strapi-deploy-guide/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <p>Access to Your VPS:</p> <p>Ensure you have SSH access to your VPS with your user credentials and IP address.</p> <p>Connect to the VPS Using SSH:</p> <p>Use the following command to connect to your VPS. Replace <code>user</code> with your VPS username and <code>your_vps_ip</code> with the IP address of your VPS:</p> <pre><code>ssh user@your_vps_ip\n</code></pre> <p>Install Docker on Your VPS:</p> <p>After connected to your VPS, install Docker by running:</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre> <p>Install Docker Compose:</p> <p>Install Docker Compose using the following command:</p> <pre><code>sudo apt-get install docker-compose -y\n</code></pre> <p>Verify Installations:</p> <p>Check Docker version to ensure it's installed correctly:</p> <pre><code>docker --version\n</code></pre> <p>Check Docker Compose version:</p> <pre><code>docker-compose --version\n</code></pre>"},{"location":"strapi/strapi-deploy-guide/#step-1-create-and-push-docker-image-to-docker-hub","title":"Step 1: Create and Push Docker Image to Docker Hub","text":"<p>In this step, you will perform the following tasks on your local machine: create the Strapi Docker image using a Dockerfile, and then push the image to a private Docker Hub repository.</p>"},{"location":"strapi/strapi-deploy-guide/#11-create-the-strapi-docker-image-using-a-dockerfile","title":"1.1: Create the Strapi Docker Image Using a Dockerfile","text":"<p>Navigate to Your Strapi Project Directory:</p> <p>Open your terminal and navigate to the root of your Strapi project where your Dockerfile is located:</p> <pre><code>cd /path/to/your-strapi-project\n</code></pre> <p>Create a Dockerfile in the Root of Your Project:</p> <p>Ensure that your Dockerfile is properly set up in the root of your Strapi project. Here\u2019s an example Dockerfile:</p> <pre><code>  # Use Node.js 20 as the base image\n  FROM node:20\n\n  # Set the working directory inside the container\n  WORKDIR /app\n\n  # Copy package.json and package-lock.json first for caching layer\n  COPY package*.json ./\n\n  # Install dependencies\n  RUN npm install\n\n  # Copy the rest of the application code\n  COPY . .\n\n  # Build the Strapi application\n  RUN npm run build\n\n  # Expose the port Strapi will run on\n  EXPOSE 1337\n\n  # Start the Strapi application\n  CMD [\"npm\", \"run\", \"start\"]\n</code></pre> <p>Build the Docker Image:</p> <p>Run the following command to build the Docker image from the Dockerfile:</p> <pre><code>docker build -t your-dockerhub-username/strapi-app:latest .\n</code></pre> <p>This command builds the Docker image and tags it as <code>your-dockerhub-username/strapi-app:latest</code>. Adjust the tag name according to your preference.</p>"},{"location":"strapi/strapi-deploy-guide/#12-push-docker-image-to-docker-hub","title":"1.2: Push Docker Image to Docker Hub","text":"<p>Log in to Docker Hub:</p> <p>Use the following command to log in to Docker Hub:</p> <pre><code>docker login\n</code></pre> <p>Enter your Docker Hub username and password when prompted.</p> <p>Create a Private Repository on Docker Hub:</p> <ul> <li> <p>Go to Docker Hub and log in to your account.</p> </li> <li> <p>Click on the \u201cRepositories\u201d tab and then click \u201cCreate Repository.\u201d</p> </li> <li> <p>Set the repository name (e.g., <code>strapi-app</code>), ensure the \"Private\" option is selected, and click \"Create.\"</p> </li> </ul> <p>Tag Your Docker Image for Docker Hub:</p> <p>Tag your locally built Docker image to match your Docker Hub repository:</p> <pre><code>docker tag your-dockerhub-username/strapi-app:latest your-dockerhub-username/strapi-app:latest\n</code></pre> <p>Replace <code>your-dockerhub-username</code> with your actual Docker Hub username.</p> <p>Push the Image to Docker Hub:</p> <p>Push the tagged image to your private repository on Docker Hub:</p> <pre><code>docker push your-dockerhub-username/strapi-app:latest\n</code></pre>"},{"location":"strapi/strapi-deploy-guide/#step-2-prepare-your-vps","title":"Step 2: Prepare Your VPS","text":"<p>Connect to your VPS:</p> <pre><code>ssh user@your_vps_ip\n</code></pre> <p>Replace <code>user</code> with your VPS username and <code>your_vps_ip</code> with the IP address of your VPS.</p> <p>Install Docker and Docker Compose:</p> <pre><code># Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Install Docker Compose\nsudo apt-get install docker-compose -y\n</code></pre> <p>Create a directory for your project:</p> <pre><code>sudo mkdir -p /srv/strapi\nsudo chown $USER:$USER /srv/strapi\ncd /srv/strapi\n</code></pre>"},{"location":"strapi/strapi-deploy-guide/#step-3-update-env-file","title":"Step 3: Update <code>.env</code> File","text":"<p>Ensure your <code>.env</code> file contains the correct environment variables:</p> <pre><code>HOST=0.0.0.0\nPORT=1337\nAPP_KEYS= # Auto generated by strapi\nAPI_TOKEN_SALT= # Auto generated by strapi\nADMIN_JWT_SECRET= # Auto generated by strapi\nTRANSFER_TOKEN_SALT= # Auto generated by strapi\nJWT_SECRET= # Auto generated by strapi\nDATABASE_CLIENT=postgres\nDATABASE_HOST=postgres\nDATABASE_PORT=5432\nDATABASE_NAME=strapi_db\nDATABASE_USERNAME=strapi_user\nDATABASE_PASSWORD=your_password # Replace with your actual password\nDATABASE_SSL=false\nNODE_ENV=production\n</code></pre>"},{"location":"strapi/strapi-deploy-guide/#step-4-create-and-configure-docker-compose-file","title":"Step 4: Create and Configure Docker Compose File","text":"<p>Ensure your <code>docker-compose.yml</code> is configured as follows:</p> <pre><code>services:\n  strapi:\n    image: your-dockerhub-username/strapi-app:latest # Replace with your actual image name\n    container_name: strapi-app\n    env_file:\n      - .env # Load environment variables from the .env file\n    ports:\n      - \"1337:1337\" # Map host port 1337 to container port 1337\n    depends_on:\n      - postgres # Ensures the postgres service is started before strapi\n    volumes:\n      - ./uploads:/app/public/uploads # Persist media uploads to the host\n    restart: unless-stopped # Ensures that Strapi restarts on VPS reboot\n\n  postgres:\n    image: postgres:16.4\n    container_name: strapi-postgres\n    environment:\n      POSTGRES_USER: ${DATABASE_USERNAME} # Use variables from .env\n      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}\n      POSTGRES_DB: ${DATABASE_NAME}\n    volumes:\n      - ./pgdata:/var/lib/postgresql/data # Persist PostgreSQL data to the host\n    ports:\n      - \"5432:5432\" # Map host port 5432 to container port 5432\n</code></pre>"},{"location":"strapi/strapi-deploy-guide/#step-5-copy-your-docker-compose-and-env-files-to-the-vps","title":"Step 5: Copy Your Docker Compose and <code>.env</code> Files to the VPS:","text":"<p>Open a New Terminal on Your Local Machine:</p> <p>In a new terminal on your local machine (not the VPS), use the <code>scp</code> command to copy the necessary files to your VPS:</p> <pre><code>scp docker-compose.yml .env user@your_vps_ip:/srv/strapi\n</code></pre>"},{"location":"strapi/strapi-deploy-guide/#step-6-deploy-strapi-with-docker-compose","title":"Step 6: Deploy Strapi with Docker Compose","text":"<p>Start the Docker Compose services:</p> <pre><code>cd /srv/strapi\ndocker-compose up -d\n</code></pre> <p>Verify the deployment:</p> <p>Check the status of the containers:</p> <pre><code>docker-compose ps\n</code></pre> <p>View logs to ensure everything is running correctly:</p> <pre><code>docker-compose logs -f\n</code></pre> <p>Access Strapi:</p> <p>Open your browser and go to <code>http://your_vps_ip:1337/admin</code> to access the Strapi admin panel.</p>"}]}